#!/usr/bin/python3
from __future__ import annotations

import re
from dataclasses import dataclass, field
from sys import stdin, stdout
from typing import ClassVar

targets = [
{% for app in APP_LIST %}
  {
    "start": "{{ app.START }}",
    "end": "{{ app.END }}",
    "ips": {{ app.IPs }},
  },
{% endfor %}
]


def build_domain_map() -> dict[str, list[str]]:
    domain_map = {}

    for target in targets:
        char_range = range(ord(target["start"]), ord(target["end"]) + 1)

        chars = [chr(x) for x in char_range]

        domain_map = domain_map | {
            first_char: target["ips"] for first_char in chars
        }

    return domain_map


@dataclass
class Response:
    question: Question
    answers: list[Answer]
    enable_logging: bool = True

    def __str__(self) -> str:
        """Serializes one or more answers into a response.

        If there are no answers (NXDOMAIN) we sent an empty end,
        which pdns interprets as NXDOMAIN

        Returns:
            str: The serialized string
        """

        data = self.answers[:]
        terminator = "END\n"

        if self.enable_logging:
            data.append(f"LOG\t{str(self.question)}")

        # some answers can be empty - for example *.app.runonflux.io
        filtered = [str(x) for x in data if str(x)]
        as_str = "\n".join(filtered) + "\n"
        return f"{as_str}{terminator}"


@dataclass
class Answer:
    domain_map: ClassVar[dict] = build_domain_map()
    qname: str
    qclass: str
    qtype: str
    id: str
    content: list[str] = field(default_factory=list)
    ttl: str = "3600"

    def __str__(self) -> str:
        lines = []

        for item in self.content:
            line = [
                "DATA",
                self.qname,
                self.qclass,
                self.qtype,
                self.ttl,
                self.id,
                item,
            ]
            lines.append("\t".join(line))

        return "\n".join(lines)

    def build(self) -> Answer:
        if not len(self.content):
            self.content = Answer.domain_map.get(self.qname[0], [])
        return self


@dataclass(kw_only=True)
class SoaAnswer(Answer):
    qtype: str = "SOA"
    content: list = field(
        default_factory=lambda: [
            "ns1.runonflux.io st.runonflux.io 2022040801 3600 600 86400 3600"
        ]
    )


@dataclass(kw_only=True)
class CnameAnswer(Answer):
    qtype: str = "CNAME"


@dataclass
class Question:
    answer_map: ClassVar[dict] = {
        "ANY": [SoaAnswer, CnameAnswer],
        "SOA": [SoaAnswer],
        "CNAME": [CnameAnswer],
    }
    question_type: str  # Q or AXFR
    qname: str  # domain
    qclass: str  # IN (INternet question)
    qtype: str  # The type, SOA, A, AAAA, CNAME etc
    id: str
    remote_address: str

    @classmethod
    def fromString(cls, data: str) -> Question:
        fields = data.rstrip("\n").split("\t")
        return cls(*fields)

    def __post_init__(self) -> None:
        self.qname = self.qname.lower()

    def __str__(self) -> str:
        return "\t".join(
            [
                self.question_type,
                self.qname,
                self.qclass,
                self.qtype,
                self.id,
                self.remote_address,
            ]
        )

    def answers(self) -> list[Answer]:
        answer_classes = Question.answer_map.get(self.qtype)
        answers = []

        if not answer_classes:
            return answers

        for cls in answer_classes:
            answer: Answer = cls(
                qname=self.qname,
                qclass=self.qclass,
                id=self.id,
            )
            answers.append(answer.build())

        return answers

    def response(self) -> Response:
        answers = self.answers()

        response = Response(self, answers)
        return str(response)


@dataclass
class AbiV1Question(Question): ...


@dataclass
class AbiV2Question(AbiV1Question):
    local_address: str


@dataclass
class AbiV3Question(AbiV2Question):
    edns_address: str


def main():
    helo_line = stdin.readline()

    handshake: re.Match = re.search("^HELO\\t(?P<version>[1-3])", helo_line)

    if not handshake:
        stdout.write("FAIL\n")
        stdin.readline()
        return

    abi_version = handshake.group("version")

    if abi_version not in ["1", "2", "3"]:
        stdout.write("FAIL\n")
        stdin.readline()
        return

    stdout.write("OK\tFlux DNS Backend\n")
    stdout.flush()

    # I believe we only support V1, if this changes ,we can update easily
    match abi_version:
        case 1:
            cls = AbiV1Question
        # case 2:
        #     cls = AbiV2Question
        # case 3:
        #     cls = AbiV3Question
        case _:
            cls = AbiV1Question

    for line in stdin:
        question = cls.fromString(line)
        response = question.response()
        stdout.write(response)
        stdout.flush()


# ques = AbiV1Question.fromString("Q\tGrAvY.com\tIN\tANY\tblah\t192.168.1.1\n")
# print(ques.response())

main()
